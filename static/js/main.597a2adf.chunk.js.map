{"version":3,"sources":["Components/Dealer/Dealer.js","Components/Player/Player.js","Components/Controls/Controls.js","services/api.js","Components/Start/Start.js","services/functions.js","Components/Table/Table.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["Dealer","props","onclickResetGame","onclickReset","onHistory","dropdown","dealerValue","dealerValueTotal","dealerData","useState","isOpen","setOpen","className","toggled","toggle","onClick","Player","this","playerValue","playerValueTotal","playerData","React","Component","Controls","buttonVisible","check","play","isDisabled","isDealDisabled","bet","onclickDouDown","onclickStand","onclickHit","onclickDeal","onClickBetMin","onClickBetMid","onClickBetMax","style","backgroundColor","DeckOfCards","generateDeck","fetch","then","res","json","result","cards","Start","showContent","setShowContent","display","deck","parentCallBack","checkDeck","a","length","Table","takeBet","valueBet","setState","prevState","chips","countCards","calcCards","state","dealerCards","playerCards","value","Object","keys","reduce","total","card","cardVal","Number","drawCards","numOfCards","i","pop","push","checkBust","value1","value2","min","status","Math","saveData","gameStatus","checkDealerStatus","playerTotal","onStay","max","functions","onDeal","onHit","onDown","onReset","savedState","onresetGame","localStorage","clear","visible","dataLastGame","ele","dataGame","JSON","parse","latestRound","data","Moment","Date","format","stringify","ele1","dataLatestGames","lastFiveGames","slice","reverse","renderHtml","array","forEach","Ele","passDate","bind","newData","table","window","onbeforeunload","content","map","alt","src","image","height","code","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.597a2adf.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport './Dealer.css';\r\nimport Hamburger from 'hamburger-react';\r\n\r\nfunction Dealer(props) {\r\n    const {onclickResetGame, onclickReset, onHistory, dropdown, dealerValue, dealerValueTotal, dealerData} = props;\r\n    const [isOpen, setOpen] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container_ham\">\r\n                <Hamburger toggled={isOpen} toggle={setOpen}/>\r\n                {isOpen ? <div className=\"burger\">\r\n                    <li>\r\n                        <ul><button className=\"btn\" onClick={onHistory}>History</button></ul>\r\n                        <ul><button className=\"btn\" onClick={onclickReset}>Reset Round</button></ul>\r\n                        <ul><button className=\"btn\" onClick={onclickResetGame}>Reset Game</button></ul>\r\n                    </li>\r\n                </div> : null}\r\n                {dropdown ?\r\n                    <div className=\"dropdown\">\r\n                    {dropdown}\r\n                    </div> : null}\r\n\r\n            </div>\r\n            <div className=\"dealer\">\r\n                Dealer: {dealerValue}/{dealerValueTotal}\r\n            </div>\r\n            <div className=\"cards\">\r\n                {dealerData}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dealer;","import React from \"react\";\r\nimport './Player.css';\r\n\r\nclass Player extends React.Component{\r\n    render() {\r\n        const {playerValue, playerValueTotal, playerData} = this.props;\r\n        return(\r\n            <>\r\n                <div className=\"player\">\r\n                    Player: {playerValue}/{playerValueTotal}\r\n                </div>\r\n                <div className=\"cards\">\r\n                    {playerData}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Player;","import React from \"react\";\r\nimport './Controls.css';\r\n\r\nclass Controls extends React.Component{\r\n    buttonVisible = (check) => {\r\n        return (this.props.play === check) ? \"hide\" : \"\";\r\n    };\r\n\r\n\r\n    isDisabled = () => {\r\n        return this.props.play ? \"Disabled\" : \"\";\r\n    };\r\n\r\n\r\n    isDealDisabled = () => {\r\n        return this.props.bet === 0 ? \"Disabled\" : \"\";\r\n    };\r\n\r\n    render() {\r\n        const {onclickDouDown, onclickStand, onclickHit, onclickDeal, onClickBetMin, onClickBetMid, onClickBetMax} = this.props;\r\n        return(\r\n            <>\r\n                <div className=\"bets\">\r\n                    <button className={\"bet \" + this.buttonVisible(true)} onClick={onClickBetMin} style = {{backgroundColor:'red'}}>5</button>\r\n                    <button className={\"bet \" + this.buttonVisible(true)} onClick={onClickBetMid} style = {{backgroundColor:'yellow'}}>15</button>\r\n                    <button className={\"bet \" + this.buttonVisible(true)} onClick={onClickBetMax} style = {{backgroundColor:'white'}}>30</button>\r\n                </div>\r\n                <div className=\"control\">\r\n                    <button className={\"btn\" + this.isDealDisabled() + \" \" + this.buttonVisible(true)} onClick={onclickDeal}>Deal</button>\r\n                    <button className={\"btn \" + this.buttonVisible(false)} onClick={onclickHit}>Hit</button>\r\n                    <button className={\"btn \" + this.buttonVisible(false)} onClick={onclickStand}>Stand</button>\r\n                    <button className={\"btn \" + this.buttonVisible(false)} onClick={onclickDouDown}>Double Down</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Controls;","const DeckOfCards = {\r\n    generateDeck(){\r\n        return fetch('https://deckofcardsapi.com/api/deck/new/draw/?count=52'\r\n        ).then(res => res.json()\r\n        ).then((result) => {\r\n            return result.cards;\r\n            }\r\n        )\r\n    }\r\n}\r\nexport default DeckOfCards;","import React, {useState} from 'react';\r\nimport './Start.css';\r\nimport DeckOfCards from \"../../services/api\";\r\n\r\nfunction Start(props){\r\n    const [showContent, setShowContent] = useState(true);\r\n\r\n    const onStart = () => {\r\n        const promise = DeckOfCards.generateDeck();\r\n        promise.then((deck) => {\r\n            props.parentCallBack(deck);\r\n            setShowContent(false);\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div className=\"content\" style={{display: showContent ? 'block' : 'none'}}>\r\n            <div className=\"title\">\r\n                <h1>Black Jack</h1>\r\n            </div>\r\n            <div className=\"start\">\r\n                <button onClick={onStart}>Start Game</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Start;","import DeckOfCards from \"./api\";\r\n\r\nconst checkDeck = async (deck) => {\r\n    if(deck.length < 10 || !deck){\r\n        deck = await DeckOfCards.generateDeck();\r\n    }\r\n    return deck;\r\n}\r\n\r\nexport default checkDeck;","import React from \"react\";\r\nimport './Table.css';\r\nimport Dealer from \"../Dealer/Dealer\";\r\nimport Player from \"../Player/Player\";\r\nimport Controls from \"../Controls/Controls\";\r\nimport Start from \"../Start/Start\";\r\nimport functions from \"../../services/functions\";\r\nimport Moment from \"moment\";\r\n\r\n\r\nclass Table extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            visible: false,\r\n            savedState: [],\r\n            dataLastGame: [],\r\n            deck: '',\r\n            chips: 1000,\r\n            bet: 0,\r\n            playerData: [],\r\n            playerCards: [],\r\n            playerValue: 0,\r\n            playerValueTotal: 0,\r\n            dealerData: [],\r\n            dealerCards: [],\r\n            dealerValue: 0,\r\n            dealerValueTotal: 0,\r\n            play: false,\r\n            gameStatus: null,\r\n            ele: null\r\n        }\r\n        this.passDate = this.passDate.bind(this);\r\n\r\n    }\r\n\r\n    passDate(data){\r\n        if (!data){\r\n            return;\r\n        }\r\n        const newData = JSON.parse(JSON.stringify(data));\r\n        this.setState( {\r\n            deck: newData,\r\n            visible: true\r\n        })\r\n    }\r\n\r\n    takeBet = (valueBet) => {\r\n        this.setState(prevState => ({\r\n            bet: prevState.bet + valueBet,\r\n            chips: prevState.chips - valueBet\r\n        }));\r\n    }\r\n    countCards = () => {\r\n        this.setState( prevState =>({\r\n            dealerValue: this.calcCards(this.state.dealerCards, false),\r\n            playerValue: this.calcCards(this.state.playerCards, false),\r\n            dealerValueTotal: this.calcCards(this.state.dealerCards, true),\r\n            playerValueTotal: this.calcCards(this.state.playerCards, true)\r\n        }))\r\n    }\r\n\r\n    calcCards = (cards, value) => {\r\n        let sumCards = Object.keys(cards).reduce((total, card) => {\r\n            let cardVal = cards[card].value;\r\n            if(cardVal === \"ACE\"){\r\n                cardVal = 1;\r\n            }else if(cardVal === \"KING\" || cardVal === \"QUEEN\" || cardVal === \"JACK\"){\r\n                cardVal = 10;\r\n            }\r\n            cardVal = Number(cardVal);\r\n            cardVal = (cardVal === 1 && value) ? 11 : cardVal;\r\n            return Number(total) + cardVal;\r\n        }, 0);\r\n        return sumCards;\r\n    };\r\n\r\n    drawCards = (deck, playerCards, numOfCards) => {\r\n        let i;\r\n        for (i = 1; i <= numOfCards; i++) {\r\n            let card = deck.pop();\r\n            playerCards.push(card);\r\n        }\r\n        return playerCards;\r\n    };\r\n\r\n    checkBust = () => {\r\n        let value1, value2, min, status = \"\";\r\n        value1 = this.calcCards(this.state.playerData, false);\r\n        value2 = this.calcCards(this.state.playerData, true);\r\n        min = Math.min(value1, value2);\r\n\r\n        if (min > 21) {\r\n            status = \"Player Bust!!!\";\r\n            this.saveData(status);\r\n        }else if(min === 21){\r\n            status = \"Player Wins!!!\";\r\n            this.saveData(status);\r\n        }\r\n\r\n        this.setState({\r\n            gameStatus: status\r\n        });\r\n    };\r\n\r\n    checkDealerStatus = (dealerCards, playerTotal) => {\r\n        let value1, value2, status = \"\";\r\n\r\n        value1 = this.calcCards(dealerCards, false);\r\n        value2 = this.calcCards(dealerCards, true);\r\n\r\n        if (Math.min(value1, value2) > 21) {\r\n            status = \"Player Wins!!!\";\r\n            this.saveData(status);\r\n        }else if ((value1 <= 21 && value1 === playerTotal) || (value2 <= 21 && value2 === playerTotal)) {\r\n            status = \"Push\";\r\n            this.saveData(status);\r\n        }else if ((value1 <= 21 && value1 > playerTotal) || (value2 <= 21 && value2 > playerTotal)) {\r\n            status = \"Dealer wins!!!\";\r\n            this.saveData(status);\r\n        }\r\n        return status;\r\n    };\r\n\r\n    onStay = async () => {\r\n        let playerTotal = Math.max(this.state.playerValue, this.state.playerValueTotal);\r\n        if (playerTotal > 21){\r\n            playerTotal = Math.min(this.state.playerValue, this.state.playerValueTotal);\r\n        }\r\n        let deck = await functions(this.state.deck);\r\n        let dealerCards = this.state.dealerCards;\r\n        let status = this.checkDealerStatus(dealerCards, playerTotal);\r\n\r\n        if (status === \"\") {\r\n            do {\r\n                this.drawCards(deck, dealerCards, 1);\r\n                status = this.checkDealerStatus(dealerCards, playerTotal);\r\n            }\r\n            while(status === \"\");\r\n        }\r\n\r\n        this.setState(prevState => ({\r\n            deck: deck,\r\n            dealerCards: dealerCards,\r\n            gameStatus: status,\r\n        }));\r\n        this.countCards();\r\n    };\r\n\r\n    onDeal = async () => {\r\n        if(this.state.bet === 0){\r\n            return;\r\n        }\r\n        let deck = await functions(this.state.deck);\r\n        let dealerData = this.state.dealerData;\r\n        let playerData = this.state.playerData;\r\n\r\n        this.drawCards(deck, dealerData, 2);\r\n        this.drawCards(deck, playerData, 2);\r\n\r\n        this.setState({\r\n            deck: deck,\r\n            dealerCards: dealerData,\r\n            playerCards: playerData,\r\n            play: true\r\n        }, function (){\r\n            this.countCards();\r\n        });\r\n    };\r\n\r\n    onHit = async () => {\r\n        if (this.state.gameStatus !== null) return;\r\n        let deck = await functions(this.state.deck);\r\n        let playerCards = this.state.playerData\r\n        this.drawCards(deck, playerCards, 1);\r\n\r\n        this.setState(prevState => ({\r\n            playerCards: playerCards,\r\n            deck: deck\r\n        }));\r\n        let dealerData = this.state.dealerData\r\n        let playerValue = this.state.playerValueTotal\r\n        let status = this.checkDealerStatus(dealerData, playerValue);\r\n        this.setState({\r\n            gameStatus: status\r\n        });\r\n        this.countCards();\r\n        this.checkBust();\r\n    };\r\n\r\n    onDown = () => {\r\n        if (this.state.gameStatus !== null) return;\r\n        let bet = this.state.bet;\r\n        if (bet >= 1000){\r\n            return;\r\n        }\r\n        this.takeBet(bet);\r\n    };\r\n\r\n\r\n    onReset = () => {\r\n        if (this.state.bet === 0) return;\r\n        let chips = this.state.chips;\r\n        let bet = this.state.bet;\r\n\r\n        if (this.state.gameStatus === \"Push\") {\r\n            chips = chips + bet;\r\n        }\r\n        else if (this.state.gameStatus === \"Player Wins!!!\") {\r\n            chips = chips + (bet * 1.5);\r\n        }\r\n\r\n        this.setState({\r\n            savedState: [],\r\n            dealerData: [],\r\n            dealerValue: 0,\r\n            dealerValueTotal: 0,\r\n            dealerCards: [],\r\n            playerData: [],\r\n            playerValue: 0,\r\n            playerValueTotal: 0,\r\n            playerCards: [],\r\n            play: false,\r\n            bet: 0,\r\n            chips: chips,\r\n            gameStatus: null\r\n        });\r\n    };\r\n\r\n    onresetGame = () => {\r\n        localStorage.clear();\r\n        this.setState({\r\n            visible: true,\r\n            savedState: [],\r\n            dataLastGame: [],\r\n            deck: '',\r\n            chips: 1000,\r\n            bet: 0,\r\n            playerData: [],\r\n            playerCards: [],\r\n            playerValue: 0,\r\n            playerValueTotal: 0,\r\n            dealerData: [],\r\n            dealerCards: [],\r\n            dealerValue: 0,\r\n            dealerValueTotal: 0,\r\n            play: false,\r\n            gameStatus: null,\r\n            ele: null\r\n        });\r\n    }\r\n    saveData = (status) => {\r\n        const dataLastGame = localStorage.dataGame ? JSON.parse(localStorage.dataGame) : null;\r\n        this.setState(dataLastGame);\r\n        let latestRound = {data: Moment(new Date()).format('LTS'), status: status, bet: this.state.bet};\r\n        this.state.dataLastGame.push(latestRound);\r\n        localStorage.dataGame = JSON.stringify(this.state.dataLastGame);\r\n    }\r\n\r\n    onHistory = () => {\r\n        if (!localStorage.dataGame || this.state.ele1) return;\r\n        const dataLatestGames = JSON.parse(localStorage.dataGame);\r\n        const lastFiveGames = dataLatestGames.slice(Math.max(dataLatestGames.length - 5, 0)).reverse();\r\n        this.renderHtml(lastFiveGames);\r\n    }\r\n\r\n    renderHtml = (data) => {\r\n        const array = [];\r\n        data.forEach((ele) =>{\r\n            const Ele = <li>{ele.data} {ele.status} = {ele.bet}</li>;\r\n            array.push(Ele);\r\n        })\r\n        this.setState({\r\n            ele: <div className=\"dropdown\" onClick={this.clear}>\r\n                        <ul>{array[0]}{array[1]}{array[2]}{array[3]}{array[4]}</ul>\r\n                    </div>\r\n        })\r\n    }\r\n\r\n    clear = () => {\r\n        this.setState({\r\n            ele: null\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const savedState = localStorage.table ? JSON.parse(localStorage.table) : null;\r\n        this.setState(savedState);\r\n        window.onbeforeunload = () => {\r\n            this.setState({\r\n                visible: false\r\n            })\r\n            localStorage.table = JSON.stringify(this.state);\r\n            return \"Do you really want to close?\";\r\n        };\r\n    };\r\n\r\n    render() {\r\n        const {play, chips, bet, dealerData, playerData, dealerValue, playerValue, dealerValueTotal, playerValueTotal, gameStatus, content, ele} = this.state;\r\n\r\n        return(\r\n            <>\r\n                <Start parentCallBack = {this.passDate}/>\r\n                <div style={{display: this.state.visible ? 'block' : 'none'}}>\r\n                    <Dealer\r\n                        onHistory={this.onHistory}\r\n                        onclickReset={this.onReset}\r\n                        onclickResetGame={this.onresetGame}\r\n                        dealerValue={dealerValue}\r\n                        dealerValueTotal={dealerValueTotal}\r\n                        dealerData={dealerData.map(card => <img alt='card' key={card.code} src={card.image} height=\"150px\"/>)}\r\n                    />\r\n                    {content}\r\n                    <Player\r\n                        playerValue={playerValue}\r\n                        playerValueTotal={playerValueTotal}\r\n                        playerData={playerData.map(card => <img alt='card' key={card.code} src={card.image} height=\"150px\"/>)}\r\n                    />\r\n                    <div className=\"bet\">\r\n                        Bet: {bet}$\r\n                    </div>\r\n                    <div className=\"chips\">\r\n                        Wallet: {chips}$\r\n                    </div>\r\n                    <Controls\r\n                        play={play}\r\n                        bet={bet}\r\n                        onclickDeal={this.onDeal}\r\n                        onclickHit={this.onHit}\r\n                        onclickDouDown={this.onDown}\r\n                        onclickStand={this.onStay}\r\n                        onClickBetMin={() => !this.state.play ? this.takeBet(5) : null}\r\n                        onClickBetMid={() => !this.state.play ? this.takeBet(15) : null}\r\n                        onClickBetMax={() => !this.state.play ? this.takeBet(30) : null}\r\n                    />\r\n                    {gameStatus ? <div className=\"message\" onClick={this.onReset}>\r\n                        <p>{gameStatus}</p>\r\n                    </div> : null}\r\n                    {ele ? ele : null}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table;","import React from 'react';\nimport Table from \"../Table/Table\";\nimport './App.css';\n\nclass App extends React.Component{\n    render() {\n        return (\n            <div className=\"App\">\n                <Table/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}